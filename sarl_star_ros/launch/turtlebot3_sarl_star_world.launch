 <launch>

   <!-- Define laser type-->
   <arg name="laser_type" default="hokuyo" />

   <!-- laser driver -->
   <!-- <include file="$(find turtlebot_navigation)/laser/driver/$(arg laser_type)_laser.launch" /> -->

   <!-- Gazebo simulation -->
   <arg name="world_file" default="$(find sarl_star_ros)/worlds/sarl_world.world"/>

   <include file="$(find sarl_star_ros)/launch/turtlebot3_gazebo.launch">
     <arg name="world_file" value = "$(arg world_file)"/>
   </include>

   <!-- Publish turtlebot3 robot state-->
   <include file="$(find turtlebot3_bringup)/launch/turtlebot3_remote.launch"/>

   <!-- laser filter (optional) -->
   <node pkg="laser_filters" type="scan_to_scan_filter_chain"
       name="laser_filter">
     <rosparam command="load" file="$(find laser_filters)/laserscan_filter.yaml" />
   </node>

   <!-- Map server -->
   <arg name="map_file" default="$(find sarl_star_ros)/map/sarl_map.yaml"/>
   <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />

   <!-- AMCL -->
   <arg name="custom_amcl_launch_file" default="$(find sarl_star_ros)/launch/includes/amcl/amcl.launch.xml"/>

   <arg name="initial_pose_x" default="0"/>
   <arg name="initial_pose_y" default="0"/>
   <arg name="initial_pose_a" default="0"/>

   <include file="$(arg custom_amcl_launch_file)">
     <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
     <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
     <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
   </include>

   <!-- People Detector
   <include file="$(find people_velocity_tracker)/launch/tracked_detector.launch" />-->

   <!-- Obstacle Detector-->
   <include file="$(find obstacle_detector)/launch/nodes.launch" />

   <!-- Move base -->
   <arg name="custom_param_file" default="$(find sarl_star_ros)/param/$(arg laser_type)_costmap_params.yaml"/>
   <include file="$(find sarl_star_ros)/launch/includes/move_base/move_base.launch.xml">
     <arg name="custom_param_file" value="$(arg custom_param_file)"/>
   </include>

   <!-- SARL_star Planner -->
   <node pkg="sarl_star_ros" type="sarl_star_node.py" name="sarl_star_node" output="screen" />

   <!-- Launch rqt_plot for accumulated reward -->
   <!--node pkg="rqt_plot" type="rqt_plot" name="accumulated_reward" args=" /accumulated_reward/data"/-->

   <!-- Launch rqt plot for calculated reward -->
   <!--node pkg="rqt_plot" type="rqt_plot" name="calculated_reward" args=" /calculated_reward/data"/-->

<!-- Launch rqt plot for wall_min_dist reward -->
   <!--node pkg="rqt_plot" type="rqt_plot" name="wall_min_distance" args=" /wall_min_distance/data"/-->

<!-- Launch rqt plot for keep_moving reward -->
   <!--node pkg="rqt_plot" type="rqt_plot" name="keep_moving" args=" /keep_moving/data"/-->

<!-- Launch rqt plot for r_danger reward -->
   <!--node pkg="rqt_plot" type="rqt_plot" name="r_danger" args=" /r_danger/data"/-->

<!-- Launch rqt plot for r_forward reward -->
   <!--node pkg="rqt_plot" type="rqt_plot" name="r_forward" args=" /r_forward/data"/-->

<!-- Launch rqt plot for r_collision reward -->
   <!--node pkg="rqt_plot" type="rqt_plot" name="r_collision" args=" /r_collision/data"/-->

<!-- Launch rqt plot for r_col_wal reward -->
   <!--node pkg="rqt_plot" type="rqt_plot" name="r_col_wall" args=" /r_col_wall/data"/-->

<!-- Launch rqt plot for r_stop_t reward -->
   <!--node pkg="rqt_plot" type="rqt_plot" name="r_stop_t" args=" /r_stop_t/data"/-->

   <!-- rviz -->
   <node pkg="rviz" type="rviz" name="rviz" args="-d $(find sarl_star_ros)/rviz/sarl_crowd_nav.rviz"/>

 </launch>
